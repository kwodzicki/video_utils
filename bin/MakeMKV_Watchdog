#!/usr/bin/env python3
import sys
import os
import argparse

'''
The following code 'attempts' to add what should be the 
site-packages location where video_utils is installed
to sys.path
'''

binDir  = os.path.dirname( os.path.realpath( __file__ ) )
topDir  = os.path.dirname( binDir )
pyVers  = f'python{sys.version_info.major}.{sys.version_info.minor}'
siteDir = ['lib', pyVers, 'site-packages']
siteDir = os.path.join( topDir, *siteDir )

if os.path.isdir(siteDir):
    if siteDir not in sys.path:
        sys.path.append( siteDir )

from video_utils import log
from video_utils.config import BASEPARSER,  MakeMKVFMT, get_transcode_log, get_comskip_log
from video_utils.watchdogs.makemkv import MakeMKV_Watchdog
from video_utils.utils.pid_check import pid_running
from video_utils.utils.handlers import EMailHandler, init_log_file

DESC = (
    'A CLI for running a watchdog to monitor a directory (or directories) '
    'for new files to transcode and add Plex'
)

if __name__ == "__main__":

    # Set the description of the script to be printed in the help doc, i.e., ./script -h
    parser = argparse.ArgumentParser(
        description     = DESC,
        parents         = [BASEPARSER],
        formatter_class = argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.set_defaults( loglevel = MakeMKVFMT['level'] )
    parser.add_argument(
        "indir",
        type   = str,
        nargs='+',
        help = "Directory(s) to watch for new MakeMKV output files",
    )
    parser.add_argument(
        "outdir",
        type   = str,
        help = (
            "Top level directory for Plex library directories. E.g., "
            "'/mnt/plexLibs' if your library directories are "
            "'/mnt/plexLibs/Movies' and '/mnt/plexLibs/TV Shows'."
        ),
    )
    parser.add_argument(
        "--fileExt",
        type   = str,
        nargs='+',
        help = (
            "Set file extensions to look for in watched directories; only "
            "files with given extension(s) will be processed. Default is just '.mkv'"
        ),
    )
    parser.add_argument(
        "--subtitles",
        action = "store_true",
        help = "Set to extract subtitle(s) from files.",
    )
    parser.add_argument(
        "--recursive",
        action = "store_true",
        help = "If set, will look recursively through directory for new files.",
    )
    args = parser.parse_args()

    if pid_running( MakeMKVFMT['pidFile'] ):
        log.critical( '%s instance already running!', parser.prog )
        sys.exit(1)

    if args.fileExt is not None:
        args.fileExt = [item for sublist in args.fileExt for item in sublist]

    MakeMKVFMT['level'] = args.loglevel
    init_log_file( MakeMKVFMT )

    email = EMailHandler( subject = f'{parser.prog} Update' )
    if email:
        log.addHandler( email )

    try:
        wd = MakeMKV_Watchdog(
            *args.indir,
            fileExt       = args.fileExt,
            outdir        = args.outdir,
            threads       = args.threads,
            cpulimit      = args.cpulimit,
            lang          = args.lang,
            remove        = not args.no_remove,
            srt           = not args.no_srt,
            subtitles     = args.subtitles,
            transcode_log = get_transcode_log( parser.prog ),
            comskip_log   = get_comskip_log(   parser.prog ),
            recursive     = args.recursive,
        )
    except:
        log.exception('Something went wrong! Watchdog failed to start')
    else:
        wd.join()
