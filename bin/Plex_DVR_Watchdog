#!/usr/bin/env python3
import logging
from logging.handlers import RotatingFileHandler
import sys, os, time
import argparse

'''
The following code 'attempts' to add what should be the 
site-packages location where video_utils is installed
to sys.path
'''

binDir  = os.path.dirname( os.path.realpath( __file__ ) )
topDir  = os.path.dirname( binDir )
pyVers  = 'python{}.{}'.format(sys.version_info.major, sys.version_info.minor)
siteDir = ['lib', pyVers, 'site-packages']
siteDir = os.path.join( topDir, *siteDir )

if os.path.isdir(siteDir):
  if (siteDir not in sys.path):
    sys.path.append( siteDir )

from video_utils import log
from video_utils.config import BASEPARSER, plexFMT, get_transcode_log, get_comskip_log
from video_utils.plex.plex_dvr_watchdog import PlexDVRWatchdog
from video_utils.utils.pid_check import pid_running
from video_utils.utils.handlers import EMailHandler, init_log_file

DESC = 'A CLI for running a watchdog to monitor a Plex library (or libraries) for new files to convert to h264 encoded videos'

if __name__ == "__main__":

  parser = argparse.ArgumentParser( 
            description     = DESC, 
            parents         = [BASEPARSER],
            formatter_class = argparse.ArgumentDefaultsHelpFormatter )           # Set the description of the script to be printed in the help doc, i.e., ./script -h
  parser.set_defaults( loglevel = plexFMT['level'] )
  parser.add_argument("dir",           type   = str, nargs='+', help = "Plex library directory(s) to watch for DVR recordings") 
  parser.add_argument("--script",      type   = str,            help = "Set full path of Plex DVR Post-processing script to run. Use this if you already have a script that you would like to run instead of using the utilities included in this distribution.")
  parser.add_argument("--comdetect",   action = "store_true",   help = "Enable commercial detection")
  parser.add_argument("--destructive", action = "store_true",   help = "Set to cut commercials out of file. Default is to leave commercials in file and add chapters for show segments and commercials. This is safer.")

  args = parser.parse_args()                                                   # Parse the arguments

  if pid_running( plexFMT['pidFile'] ):
    log.critical( '{} instance already running!'.format(parser.prog) )
    exit(1)
  plexFMT['level'] = args.loglevel
  init_log_file( plexFMT )

  email = EMailHandler( subject = '{} Update'.format(parser.prog) )
  if email:
    log.addHandler( email )

  try:
    wd = PlexDVRWatchdog(*args.dir, 
        threads       = args.threads, 
        cpulimit      = args.cpulimit,
        script        = args.script,
        lang          = args.lang,
        transcode_log = get_transcode_log( parser.prog ),
        comskip_log   = get_comskip_log(   parser.prog ),
        comdetect     = args.comdetect,
        destructive   = args.destructive,
        no_remove     = args.no_remove,
        no_srt        = args.no_srt)
  except:
    log.exception('Something went wrong! Watchdog failed to start')
    status = 255
  else:
    wd.join()

